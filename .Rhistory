rm(list=ls())
library(spNNGP)
library(MBA)
library(fields)
rmvn <- function(n, mu=0, V = matrix(1)){
p <- length(mu)
if(any(is.na(match(dim(V),p))))
stop("Dimension problem!")
D <- chol(V)
t(matrix(rnorm(n*p), ncol=p)%*%D + rep(mu,rep(n,p)))
}
##Make some data
set.seed(1)
n <- 2000
coords <- cbind(runif(n,0,1), runif(n,0,1))
x <- cbind(1, rnorm(n))
B <- as.matrix(c(1,5))
sigma.sq <- 1
tau.sq <- 0.5
phi <- 3/0.5
D <- as.matrix(dist(coords))
R <- exp(-phi*D)
w <- rmvn(1, rep(0,n), sigma.sq*R)
y <- rnorm(n, x%*%B + w, sqrt(tau.sq))
##Fit a Conjugate NNGP model and predict for the holdout
sigma.sq.IG <- c(2, sigma.sq)
cov.model <- "exponential"
theta.alpha <- as.matrix(expand.grid(3/seq(0.1,1,by=0.1), seq(0.1,2,by=0.1)))
dim(theta.alpha)
colnames(theta.alpha) <- c("phi", "alpha")
m.c <- spConjNNGP(y~x-1, coords=coords, n.neighbors = 10,
k.fold = 5, score.rule = "crps",
n.omp.threads = 2,
theta.alpha = theta.alpha, sigma.sq.IG = sigma.sq.IG, cov.model = cov.model)
names(m.c)
head(m.c$k.fold.scores)
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=0)
points(m.c$theta.alpha, col="white", pch=2)
legend("topright", legend=c("True", "CRPS minimum"), col="white", pch=c(0,2), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=0)
legend("topright", legend="True", col="white", pch=0, bty="n")
rm(list=ls())
library(spNNGP)
library(MBA)
library(fields)
rmvn <- function(n, mu=0, V = matrix(1)){
p <- length(mu)
if(any(is.na(match(dim(V),p))))
stop("Dimension problem!")
D <- chol(V)
t(matrix(rnorm(n*p), ncol=p)%*%D + rep(mu,rep(n,p)))
}
##Make some data
set.seed(1)
n <- 2000
coords <- cbind(runif(n,0,1), runif(n,0,1))
x <- cbind(1, rnorm(n))
B <- as.matrix(c(1,5))
sigma.sq <- 1
tau.sq <- 0.5
phi <- 3/0.5
D <- as.matrix(dist(coords))
R <- exp(-phi*D)
w <- rmvn(1, rep(0,n), sigma.sq*R)
y <- rnorm(n, x%*%B + w, sqrt(tau.sq))
##Fit a Conjugate NNGP model and predict for the holdout
sigma.sq.IG <- c(2, sigma.sq)
cov.model <- "exponential"
theta.alpha <- as.matrix(expand.grid(3/seq(0.1,1,by=0.1), seq(0.1,2,by=0.1)))
dim(theta.alpha)
colnames(theta.alpha) <- c("phi", "alpha")
m.c <- spConjNNGP(y~x-1, coords=coords, n.neighbors = 10,
k.fold = 5, score.rule = "crps",
n.omp.threads = 2,
theta.alpha = theta.alpha, sigma.sq.IG = sigma.sq.IG, cov.model = cov.model)
names(m.c)
head(m.c$k.fold.scores)
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=0)
points(m.c$theta.alpha, col="white", pch=2)
legend("topright", legend=c("True", "CRPS minimum"), col="white", pch=c(0,2), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=0)
legend("topright", legend="True", col="white", pch=0, bty="n")
m.c$beta.hat
m.c$sigma.sq.hat
m.c$k.fold.scores
points(m.c$theta.alpha, col="white", pch=2)
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=0)
points(m.c$theta.alpha, col="white", pch=2)
legend("topleft", legend=c("True", "CRPS minimum"), col="white", pch=c(0,2), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=0)
points(m.c$theta.alpha, col="white", pch=2)
legend("topleft", legend="True", col="white", pch=0, bty="n")
legend("topleft", legend=c("True", "RMSPE minimum"), col="white", pch=c(0,2), bty="n")
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "CRPS minimum"), col="white", pch=c(15,17), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "RMSPE minimum"), col="white", pch=c(15,17), bty="n")
tau.sq/sigma.sq
3/0.5
3/15
3/15
3/15
rm(list=ls())
library(spNNGP)
library(MBA)
library(fields)
##Simulated data analysis
rmvn <- function(n, mu=0, V = matrix(1)){
p <- length(mu)
if(any(is.na(match(dim(V),p))))
stop("Dimension problem!")
D <- chol(V)
t(matrix(rnorm(n*p), ncol=p)%*%D + rep(mu,rep(n,p)))
}
##Make some data
set.seed(1)
n <- 2000
coords <- cbind(runif(n,0,1), runif(n,0,1))
x <- cbind(1, rnorm(n))
B <- as.matrix(c(1,5))
sigma.sq <- 1
tau.sq <- 0.5
phi <- 15
D <- as.matrix(dist(coords))
R <- exp(-phi*D)
w <- rmvn(1, rep(0,n), sigma.sq*R)
y <- rnorm(n, x%*%B + w, sqrt(tau.sq))
##Fit a Conjugate NNGP model and predict for the holdout
sigma.sq.IG <- c(2, sigma.sq)
cov.model <- "exponential"
theta.alpha <- as.matrix(expand.grid(3/seq(0.1,1,by=0.1), seq(0.1,2,by=0.1)))
dim(theta.alpha)
colnames(theta.alpha) <- c("phi", "alpha")
m.c <- spConjNNGP(y~x-1, coords=coords, n.neighbors = 10,
k.fold = 5, score.rule = "crps",
n.omp.threads = 2,
theta.alpha = theta.alpha, sigma.sq.IG = sigma.sq.IG, cov.model = cov.model)
names(m.c)
head(m.c$k.fold.scores)
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "CRPS minimum"), col="white", pch=c(15,17), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "RMSPE minimum"), col="white", pch=c(15,17), bty="n")
m.c$beta.hat
m.c$sigma.sq.hat
3/15
3/0.5
3/seq(0.1,1,by=0.1)
theta.alpha <- as.matrix(expand.grid(3/seq(0.1,3,by=0.1), seq(0.1,2,by=0.1)))
dim(theta.alpha)
colnames(theta.alpha) <- c("phi", "alpha")
m.c <- spConjNNGP(y~x-1, coords=coords, n.neighbors = 10,
k.fold = 5, score.rule = "crps",
n.omp.threads = 2,
theta.alpha = theta.alpha, sigma.sq.IG = sigma.sq.IG, cov.model = cov.model)
names(m.c)
head(m.c$k.fold.scores)
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "CRPS minimum"), col="white", pch=c(15,17), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "RMSPE minimum"), col="white", pch=c(15,17), bty="n")
m.c$beta.hat
rm(list=ls())
library(spNNGP)
library(MBA)
library(fields)
##Simulated data analysis
rmvn <- function(n, mu=0, V = matrix(1)){
p <- length(mu)
if(any(is.na(match(dim(V),p))))
stop("Dimension problem!")
D <- chol(V)
t(matrix(rnorm(n*p), ncol=p)%*%D + rep(mu,rep(n,p)))
}
##Make some data
set.seed(1)
n <- 2000
coords <- cbind(runif(n,0,1), runif(n,0,1))
x <- cbind(1, rnorm(n))
B <- as.matrix(c(1,5))
sigma.sq <- 1
tau.sq <- 0.5
phi <- 3/0.5
D <- as.matrix(dist(coords))
R <- exp(-phi*D)
w <- rmvn(1, rep(0,n), sigma.sq*R)
y <- rnorm(n, x%*%B + w, sqrt(tau.sq))
##Fit a Conjugate NNGP model and predict for the holdout
sigma.sq.IG <- c(2, sigma.sq)
cov.model <- "exponential"
theta.alpha <- as.matrix(expand.grid(3/seq(0.1,3,by=0.1), seq(0.1,2,by=0.1)))
dim(theta.alpha)
colnames(theta.alpha) <- c("phi", "alpha")
m.c <- spConjNNGP(y~x-1, coords=coords, n.neighbors = 10,
k.fold = 5, score.rule = "crps",
n.omp.threads = 2,
theta.alpha = theta.alpha, sigma.sq.IG = sigma.sq.IG, cov.model = cov.model)
names(m.c)
head(m.c$k.fold.scores)
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "CRPS minimum"), col="white", pch=c(15,17), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "RMSPE minimum"), col="white", pch=c(15,17), bty="n")
m.c$beta.hat
m.c$sigma.sq.hat
rm(list=ls())
library(spNNGP)
library(MBA)
library(fields)
##Simulated data analysis
rmvn <- function(n, mu=0, V = matrix(1)){
p <- length(mu)
if(any(is.na(match(dim(V),p))))
stop("Dimension problem!")
D <- chol(V)
t(matrix(rnorm(n*p), ncol=p)%*%D + rep(mu,rep(n,p)))
}
##Make some data
set.seed(1)
n <- 2000
coords <- cbind(runif(n,0,1), runif(n,0,1))
x <- cbind(1, rnorm(n))
B <- as.matrix(c(1,5))
sigma.sq <- 1
tau.sq <- 0.5
phi <- 3/0.5
D <- as.matrix(dist(coords))
R <- exp(-phi*D)
w <- rmvn(1, rep(0,n), sigma.sq*R)
y <- rnorm(n, x%*%B + w, sqrt(tau.sq))
##Fit a Conjugate NNGP model and predict for the holdout
sigma.sq.IG <- c(2, sigma.sq)
cov.model <- "exponential"
theta.alpha <- as.matrix(expand.grid(3/seq(0.5,3,by=0.1), seq(0.1,2,by=0.1)))
dim(theta.alpha)
colnames(theta.alpha) <- c("phi", "alpha")
m.c <- spConjNNGP(y~x-1, coords=coords, n.neighbors = 10,
k.fold = 5, score.rule = "crps",
n.omp.threads = 2,
theta.alpha = theta.alpha, sigma.sq.IG = sigma.sq.IG, cov.model = cov.model)
names(m.c)
head(m.c$k.fold.scores)
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "CRPS minimum"), col="white", pch=c(15,17), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "RMSPE minimum"), col="white", pch=c(15,17), bty="n")
rm(list=ls())
library(spNNGP)
library(MBA)
library(fields)
##Simulated data analysis
rmvn <- function(n, mu=0, V = matrix(1)){
p <- length(mu)
if(any(is.na(match(dim(V),p))))
stop("Dimension problem!")
D <- chol(V)
t(matrix(rnorm(n*p), ncol=p)%*%D + rep(mu,rep(n,p)))
}
##Make some data
set.seed(1)
n <- 2000
coords <- cbind(runif(n,0,1), runif(n,0,1))
x <- cbind(1, rnorm(n))
B <- as.matrix(c(1,5))
sigma.sq <- 1
tau.sq <- 0.5
phi <- 3/0.25
D <- as.matrix(dist(coords))
R <- exp(-phi*D)
w <- rmvn(1, rep(0,n), sigma.sq*R)
y <- rnorm(n, x%*%B + w, sqrt(tau.sq))
##Fit a Conjugate NNGP model and predict for the holdout
sigma.sq.IG <- c(2, sigma.sq)
cov.model <- "exponential"
theta.alpha <- as.matrix(expand.grid(3/seq(0.1,3,by=0.2), seq(0.1,2,by=0.2)))
dim(theta.alpha)
colnames(theta.alpha) <- c("phi", "alpha")
m.c <- spConjNNGP(y~x-1, coords=coords, n.neighbors = 10,
k.fold = 5, score.rule = "crps",
n.omp.threads = 2,
theta.alpha = theta.alpha, sigma.sq.IG = sigma.sq.IG, cov.model = cov.model)
names(m.c)
head(m.c$k.fold.scores)
par(mfrow=c(1,2))
crps.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","crps")], no.X=100, no.Y=100)$xyz.est
image.plot(crps.surf, xlab="phi", ylab="alpha=tau^2/sigma^2", main="CRPS (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "CRPS minimum"), col="white", pch=c(15,17), bty="n")
rmspe.surf <- mba.surf(m.c$k.fold.scores[,c("phi","alpha","rmspe")], no.X=100, no.Y=100)$xyz.est
image.plot(rmspe.surf, xlab="phi", ylab="alpha=tau^2/sigma^2",  main="RMSPE (lower is better)")
points(phi, tau.sq/sigma.sq, col="white", pch=15)
points(m.c$theta.alpha, col="white", pch=17)
legend("topleft", legend=c("True", "RMSPE minimum"), col="white", pch=c(15,17), bty="n")
m.c$beta.hat
##Harvard Forest forest canopy analysis
load("CHM.rda")
CHM <- CHM[CHM[,3]>0,]
